 				Layout
- margintop : üstten koyulacak boşluk
- android: layout_marginBottom ="90dp" 
- android: layout_above="@+id/button5" // button5'in üstünde demek
- <string name ="mesajdegistirme">MESAJ DEĞİŞTİRME</string> // şeklindeki tanımlama ile ilgili elemanın text kısmına @string/mesajdegistirme yazılması halinde "MESAJ DEĞİŞTİRME" yazısı gözükür.
- Daha önce tanımlamış olduğumuz button textview gibi bileşenlerin kullanımını MainActivity.java içerisinde etkinleştiriyoruz.
-  button1.setOnClickListener(new View.OnClickListener() // button1'e tıkladığımızda yapılacak olan işlemleri bu şekilde tanımlarız.
- Benzer bir durum için, layout'a verilen id lay olsun. lay.setBackgroundColor(Color.RED) yaparsak buton tıkladığımızda layout kırmızı olur.
- Color.parseColor(#) ile # işaretinden sonra istenilen rengin html kodunu yazarak o renk elde edilir.
- layout_weight="1" ile konulan butonların ekranı eşit büyüklükte paylaşması sağlanır.
- setContentView(R.layout.activity_main) ile activity_main.java'yı xml dosyasına bağlamış oluyoruz.
- Konulan buton ve textviewlerin tasarımı activity_main.xml içerisinde yapılır.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				Toast

- toast.setDuration(Toast.LENGTH_LONG); // ile belirtilen mesajın ekranda belirme süresini tanımlarız. LENGTH_LONG yerine ms cinsinden değer de yazabiliriz.
- ikinciornek içresinde toast ve textview beraber kullanımı mevcut.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
			Textview Kullanımı 

- activity_main.xml içerisinden ya da tıklanan elemanın properties kısmından da seçili elemanın özellikleri değiştirilebilir.
- match_parent: İçinde bulunduğu kontrolün genişliği kadar büyütür.
- wrap_component: içine yazılan yazı kadar büyür.
- Linearlayout'un genişliğini de wrap_component yaparsak içerisine eklenen text kadar büyür.
- Text içerisindeki ifadedeyi activity_main'den ya da values -> strings.xml içerisinden de değiştirebiliriz.
-  <string name="deger">Marmara Üniversitesi</string> sonrada ilgili text içerisine @string/deger yazılarak string.xml içerisindeki deger'den yazılmış olan ifade çekilir.
- textSize içerisinden yazının fontu ayarlanabilir. (25sp gibi)
- android:layout_marginLeft="10dp" ile text ifadesi 10dp sağa kayar.
- android:layout_marginLeft="10dp" ile text ifadesi 10dp aşağı kayar.
- sadece margin değer verilirse sağdan/soldan/üstten/alttan girilen dp değeri kadar boşluk verir.
- android:paddingLeft="10dp" komutu ile text componenti içerisindeki yazı 10dp sağa kayar.
- <--   --> yorum satırı için.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
			Butonların onClick Olaylarının Farklı Şekillerde Ele Alınması

- Çok sayıda buton olması durumlarında her bir buton için button.setOnClickListener(new View.OnClickListener)
  şeklinde yazmak yerine "public class MainActivity extends ActionBarActivity" satırını
  "public class MainActivity extends ActionBarActivity implements View.OnClickListener" şeklinde yazıp "Implements Methods" ile overwrite ederek 
  de daha kısa bir şekilde çözüm sağlamış oluruz.
- @Override "public void onClick(View v)" içerisinde "int id =v.getId();" komutu ile tıklanan butonun id'si id değişkenine atanır.
- Switch-Case kullanılarak farklı durumlar için farklı işlemlerin yapılması da bu şekilde sağlanmış olur.
- Diğer önemli olan nokta ise; buttonların tanımlamaları yapıldıktan sonra "button.setOnClickListener(this);" tanımlaması "onCreate" içersinde yapılması gerekiyor.
- Aynı şekilde "Button button = findViewById(R.id.button);" buton tanımlaması da "onCreate" içerisinde yapılıyor.
- switch(id) case R.id.button //
- Diğer yöntemde ise, button properties kısmında onClick kısmına herhangi bir fonksiyon yazılır örneğin "deneme".
- Bunun xml içerisinde android:onClick="deneme". Sonrasında bunu MainActivty.java içerisinde public void deneme (View view){} yaparak da kullanabiliriz.// sonraki kısımlar aynı.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			EditText Kullanımı
- Kullanıcıdan alınacak metin ya da numara gibi girdileri kaynak kod tarafına iletmek için kullanılır.
- activity_main.xml penceresinde ekrana gönderdiğimiz ögeyi MainActivity bölümüne gelerek :
	EditText edittext = (EditText)findViewById(R.id.text);
  şeklinde tanımlarız.
- final değişkeni ile değerin değiştirilmemesi sağlanır. editText kullanımlarında önemli.
- Android:textAllCaps=true yaparak textCaps içindeki yazıları büyütürüz.
- Android:typeface=<monospace> // textType'ın fontunu <monospace> alırız.
- Android:textStyle=<<italic>>
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			AndroidManifest (altinciornekv2)
- Yeni bir Activity, AndroidManifest dosyasında tanımlı değilse uygulamamız çöker.
- Ekran geçişi sağlanırken AndroidManifest dosyasında bu ekranı eklememiz gerekir.
- Yapacağımız uygulamanın türüne göre farklı aktivite sınıfları oluşturup intentler aracılığıyla bunlar arasında geçiş yaparız.
- Android işletim sistemi, bir aktivitenin ya da servisin birbirlerini çağırması ve iletişime geçebilmesi için ortak bir yapı oluşturmuştur. Bu yapıya intent denir.
- Örnek olarak, activity_main.xml layoutuna tıkladığımızda diğer sayfaya geçmesi için buton ekliyoruz.
- Yeni bir activity oluşturuyoruz (java -> sağ tık -> new -> Activity)
- Oluşturulan bu 2.Activity layoutumuza bir textView ekleyerek içerisine istenilen metni giriyoruz.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			ListView 
- Satırlardan oluşan bir tablo oluşturmak için kullanılır. Belirli bir kaynaktan(veritabanı, web servisi) çekilen veriyi göstermek için uygundur.
- ListView, kendi içinde satır satır TextView ögeleri bulunduran bir yapıdır.
- Bunun gibi birçok View'den oluşan görsel ögeler ViewGroup olarak da sınıflandırılır.
- ListView Constraint üzerinde değil de Relative üzerinde daha verimli çalıştı. Ancak paddinglere dikkat. Özellikle üstten.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
			CheckBox
- isChecked() -> CheckBox'ın işaretli olup olmadığını kontrol eder.
- setOnCheckedChangeListener(OnCheckedChangeListener) : Bileşeni dinlememizi sağlar. Yani checkbox'ın durumu değişirse bununla görürüz.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			RadioButton
- Bir butonda işaretli olan radio button'u aldık. Buttona tıklandığında radioGroup'taki seçili id'yi aldık ve ve buttonda bir Toast mesakı ile gösterdik.(radiobuttonornegi)
- 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			Switch
- İki seçenek arasında seçim yapabilen iki durumlu bir geçiş anahtarıdır.
- Temelde o anki Switch durumunu gösteren bir kapalı/açık butonudur.
- Bir Switch'in o andaki durumunu programlı olarak isChecked() metodunu kullanarak kontrol ederiz.
- Bu method boolean değer döndürür.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
			ToggleButton
- Düğmedeki Açık/Kapalı durumunu görüntülemek için kullanılabilir.
- Switch ile aynı amaç için kullanılır.
- CompoundButton sınıfının alt sınıfır.
- android:textOff // İşaretlenmediğinde düğme metni. //android:textOff="KAPALI" 
- android:textOn  // İşaretlendiğinde düğme metni.  // android:textOn ="AÇIK"
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			ImageView
- Görüntü kaynaklarını uygulama içerisinde gösterilmesi için kullanılır.
- activity_main.xml içerisinde tanımlması yapıldıktan sonra aynı tag içerisinde resmin kaynağı da atanması gerekir.
- Örneğin : android:src ="@mipmap/ic_launcher"
- SD kart gibi dış bir kaynaktan resim yüklemek için : 
	String path = Environment.getExternalStorageDirectory()+"/Images/deneme_icon.jpg";
	File file = new File(path);
	if(file.exists())
	{
	 Bitmap bitmap = BitmapFactory.decodeFile(file.getAbsolutePath());
	 ImageView img = findViewById(R.id.yourImageId);
	 img.setImageBitmap(bitmap);
	}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			WebView
- Hibrit bir yapı varsa (belli sayfaları mobil uyumlu web siteleri gibi) ya da kullanıcıyı uygulamayı kapatmadan bir web sitesine yönlendirmek istiyorsak WebView bileşenini kullanırız.
- WebView Android içerisinde web tarayıcısı gibi davranır.
- Gerekli tanımlamaları yaptıktan sonra AndroidManifest.xml içerisinde 
	<uses-permission android:name="android.permission.INTERNET"></uses-permission>
  tanımlaması da yapılarak izin verilmelidir.
- 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			SeekBar
- Kullanıcının bir seviye belirlemesini sağlayan bileşendir.
- ProgressBar'ın imleç eklenmiş halidir.
- Genellikle ses, media gibi ortamların kontrolü için kullanılır.
- void setMax(int max) // SeekBar'ın maximum değerinin belirlenmesi için kullanılır. Default 100'dür.
- void setOnSeekBarChangeListener(SeekBar.OnSeekBarChangeListener) // SeekBar'da gerçekleşen değişiklikleri yakalamak için kullanılır.
- 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			AlertDialog
- Küçük bir pencere açılan ve bizlere uyarı gösteren, yaptığımız seçime göre işlemler yapan nesnelerdir.
- alertDialogBuilder.setCancelable(): True ya da False değerleri alır. True dersek dialog penceresi açıldığında ekranın herhangi bir yerine tıklayarak uyarı penceresinden işlem yapmadan çıkabiliriz.
- alertDialogBuilder.setIcon(): Dialog penceresinde bir icon görünmesini sağlayabiliriz.
- 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

			progressdialog
